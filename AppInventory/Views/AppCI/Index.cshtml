@model PagedList.IPagedList<AppInventory.Models.AppCI>
@using PagedList.Mvc;

@{
    ViewBag.Title = "Application List" + (!string.IsNullOrEmpty(ViewBag.CurrentDep) ? string.Format("(Deployment:{0})", ViewBag.CurrentDep) : "")
         + (!string.IsNullOrEmpty(ViewBag.CurrentUser) ? string.Format("(User:{0})", ViewBag.CurrentUser) : "")
        + (string.IsNullOrEmpty(ViewBag.CurrentDept) ? (string.IsNullOrEmpty(ViewBag.CurrentDeptHL) ? (string.IsNullOrEmpty(ViewBag.CurrentDeptFilter) ? "" : " - " + ViewBag.CurrentDeptFilter + "%") : " - " + ViewBag.CurrentDeptHL) : " - " + ViewBag.CurrentDept);

    bool showDeleted = false;
    if (ViewBag.ShowDeleted != null) { showDeleted = ((bool?)ViewBag.ShowDeleted).Value; }

}

<h2>@ViewBag.Title</h2>
<hr />

@Styles.Render("~/Content/themes/base/css")
@Styles.Render("~/Content/chosen/css")
@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/chosen")

<script type="text/javascript">
    $(document).ready(function () {
        $(".chosenFilter").chosen({ max_selected_options: 1, allow_single_deselect: "true", disable_search: "true", width: "140px" })
            .change(function (event) {
                var target = $(event.target);
                $("#Search input[id=" + $(this).prop("id") + "]").val(target.val());
                $("#Search  input[type=submit]").trigger("click");
            });

        toggleFilter = function (header, filter, ctrl) {
            $("#" + filter).toggle();
            $("#" + header).toggle();
            var $chosen = $("#" + filter).find("#" + ctrl);

            setTimeout(function () {
                $chosen.trigger('chosen:open');
            }, 200);
        }

        var appModel = '@(ViewBag.CurrentCMModel)';
        if (appModel != null && appModel != '')
            toggleFilter('cmmodel-header', 'cmmodel-filter', 'AppModel');

        var scopeID = '@(ViewBag.CurrentScopeID)';
        if (scopeID != null && scopeID != '')
            toggleFilter('scope-header', 'scope-filter', 'ScopeID')

        var dispositionID = '@(ViewBag.CurrentDispositionID)';
        if (dispositionID != null && dispositionID != '')
            toggleFilter('disposition-header', 'disposition-filter', 'DispositionID')

        var statusID = '@(ViewBag.CurrentStatusID)';
        if (statusID != null && statusID != '')
            toggleFilter('status-header', 'status-filter', 'StatusID')

        var pkgStatusID = '@(ViewBag.CurrentPkgStatusID)';
        if (pkgStatusID != null && pkgStatusID != '')
            toggleFilter('pkgstatus-header', 'pkgstatus-filter', 'PkgStatusID')


        updateData = function (event, ui) {

            var $tr = $(this).closest("tr");
            var $itemAppStatus = $tr.find(".AppStatus");
            var $itemAppDisposition = $tr.find(".AppDisposition");
            var $itemAppPkgStatus = $tr.find(".AppPkgStatus");
            var $itemAppCIID = $tr.find(".AppCIID");
            var $itemRowVersion = $tr.find(".RowVersion");
            var $itemMessage = $tr.find("#show-message");

            var AppCI = {
                "AppCIID": $itemAppCIID.val(),
                "RowVersion": $itemRowVersion.val(),
                "AppStatus": $itemAppStatus.val(),
                "AppDisposition": $itemAppDisposition.val(),
                "AppPkgStatus": $itemAppPkgStatus.val()
            }

            $.ajax({
                url: '/AppCI/UpdateData',
                data: JSON.stringify(AppCI),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                dataType: "json",
                success: function (result) {
                    isSuccess = result;
                },
                error: function (result) {
                    isSuccess = result;
                }

            }).done(function () {

                var result = jQuery.parseJSON(isSuccess);
                if (result.Result == "1") {
                    $itemRowVersion.val(result.RowVersion);
                    $itemMessage.show("fast", function () {
                        $itemMessage.removeClass("form-control-data-error");
                        $itemMessage.addClass("form-control-data-saved");
                        $itemMessage.attr("title", result.Message);
                    });
                }
                else {
                    $itemMessage.show("fast", function () {
                        $itemMessage.removeClass("form-control-data-saved");
                        $itemMessage.addClass("form-control-data-error");
                        $itemMessage.attr("title", result.Message);
                    });
                }
            });
        }

        var statusData;
        $.getJSON("/master/appStatus").done(function (data) { statusData = data; });

        var dispData;
        $.getJSON("/master/appDisposition").done(function (data) { dispData = data; });

        var pkgStatusData;
        $.getJSON("/master/appPkgStatus").done(function (data) { pkgStatusData = data; });

        $(".AppStatus").autocomplete(
            {
                source: function (request, response) {
                    response($.map(statusData, function (item) {
                        return { label: item.text, value: item.text };
                    }))
                }, messages: { noResults: "", results: "" }
            }
            , { minLength: 0 }
            , { change: updateData }).focus(function () {
                $(this).autocomplete("search", $(this).val());
            });


        $(".AppDisposition").autocomplete(
            {
                source: function (request, response) {
                    response($.map(dispData, function (item) {
                        return { label: item.text, value: item.text };
                    }))
                }, messages: { noResults: "", results: "" }
            }
            , { minLength: 0 }
            , { change: updateData }).focus(function () {
                $(this).autocomplete("search", $(this).val());
            });

        $(".AppPkgStatus").autocomplete(
           {
               source: function (request, response) {
                   response($.map(pkgStatusData, function (item) {
                       return { label: item.text, value: item.text };
                   }))
               }, messages: { noResults: "", results: "" }
           }
           , { minLength: 0 }
           , { change: updateData }).focus(function () {
               $(this).autocomplete("search", $(this).val());
           });
    });
</script>


@using (Html.BeginForm("Index", "AppCI", FormMethod.Get, new { @id = "Search" }))
{
    <p>
        <div>
            @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "col-md-3 form-control", placeholder = "Name/CMID text search" })
            @if (string.IsNullOrEmpty(ViewBag.CurrentDept) && string.IsNullOrEmpty(ViewBag.CurrentUserID))
            {
                @Html.TextBox("DeptFilter", ViewBag.CurrentDeptFilter as string, new { @class = "col-md-3 form-control", placeholder = "Dept search like TECH,APG..." })
            }
            <div class="col-md-2 text-center">
                Deleted Apps @Html.CheckBox("ShowDeleted", showDeleted, new { @class = "input" })
            </div>
            <div class="col-md-2">
                <input type="submit" id="btnSearch" value="Search" class="btn-link-menu" />
                @Html.Hidden("AppModel", ViewBag.CurrentCMModel as string)
                @Html.Hidden("ScopeID", ViewBag.CurrentScopeID as string)
                @Html.Hidden("DispositionID", ViewBag.CurrentDispositionID as string)
                @Html.Hidden("StatusID", ViewBag.CurrentStatusID as string)
                @Html.Hidden("PkgStatusID", ViewBag.CurrentPkgStatusID as string)
                @Html.Hidden("Dept", ViewBag.CurrentDept as string)
                @Html.Hidden("DeptHL", ViewBag.CurrentDeptHL as string)
                @Html.Hidden("DeploymentID", ViewBag.CurrentDeploymentID as string)
                @Html.Hidden("UserID", ViewBag.CurrentUserID as string)
            </div>

            @if (AppInventory.CustomFilters.AuthorizeRole.IsRoleAuthorized(this.Context, new List<string>() { "Admin", "Packager" }))
            {
                <div class="col-md-2 text-right">
                    @Html.ActionLink("+ Add New App", "Create", null, new { @class = "btn-link-menu" })
                </div>
            }

        </div>
    </p>
}
<br />
<hr />
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
    <table class="table-striped col-lg-12">
        <tr>
            <th>
                ID
            </th>
            <th>
                @Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter, statusID = ViewBag.CurrentStatusID, dispositionID = ViewBag.CurrentDispositionID, scopeID = ViewBag.CurrentScopeID, appModel = ViewBag.CurrentCMModel, dept = ViewBag.CurrentDept, deptHL = ViewBag.CurrentDeptHL, deptFilter = ViewBag.CurrentDeptFilter, deploymentID = ViewBag.CurrentDeploymentID, userID = ViewBag.CurrentUserID })
            </th>
            <th>
                @Html.ActionLink("Manufacturer", "Index", new { sortOrder = ViewBag.ManufacturerSortParm, currentFilter = ViewBag.CurrentFilter, statusID = ViewBag.CurrentStatusID, dispositionID = ViewBag.CurrentDispositionID, scopeID = ViewBag.CurrentScopeID, appModel = ViewBag.CurrentCMModel, dept = ViewBag.CurrentDept, deptHL = ViewBag.CurrentDeptHL, deptFilter = ViewBag.CurrentDeptFilter, deploymentID = ViewBag.CurrentDeploymentID, userID = ViewBag.CurrentUserID })
            </th>
            <th>
                Version
            </th>
            <th>
                @Html.ActionLink("CM ID", "Index", new { sortOrder = ViewBag.CMIDSortParm, currentFilter = ViewBag.CurrentFilter, statusID = ViewBag.CurrentStatusID, dispositionID = ViewBag.CurrentDispositionID, scopeID = ViewBag.CurrentScopeID, appModel = ViewBag.CurrentCMModel, dept = ViewBag.CurrentDept, deptHL = ViewBag.CurrentDeptHL, deptFilter = ViewBag.CurrentDeptFilter, deploymentID = ViewBag.CurrentDeploymentID, userID = ViewBag.CurrentUserID })
            </th>
            <th>
                <div id="cmmodel-header" class="@(!string.IsNullOrEmpty(ViewBag.CurrentCMModel)? "table-header-filter-clear" : "table-header-filter-add")" style="width:100px" onclick="toggleFilter('cmmodel-header', 'cmmodel-filter', 'AppModel')">
                    Model
                </div>
                <div id="cmmodel-filter" hidden="hidden">
                    @Html.ListBox("AppModel", ViewBag.CMModel as SelectList, new { @class = "chosenFilter", data_placeholder = "CM Model", @style = "width:100px" })
                </div>
            </th>
            <th>
                <div id="scope-header" class="@(ViewBag.CurrentScopeID != null ? "table-header-filter-clear" : "table-header-filter-add")" style="width:100px" onclick="toggleFilter('scope-header', 'scope-filter', 'ScopeID')">
                    Scope
                </div>
                <div id="scope-filter" hidden="hidden">
                    @Html.ListBox("ScopeID", ViewBag.Scope as SelectList, new { @class = "chosenFilter", data_placeholder = "Scope", @style = "width:100px" })
                </div>
            </th>
            <th>
                <div id="disposition-header" class="@(ViewBag.CurrentDispositionID != null ? "table-header-filter-clear" : "table-header-filter-add")" style="width:125px" onclick="toggleFilter('disposition-header', 'disposition-filter', 'DispositionID')">
                    Disposition
                </div>
                <div id="disposition-filter" hidden="hidden">
                    @Html.ListBox("DispositionID", ViewBag.Disposition as SelectList, new { @class = "chosenFilter", data_placeholder = "Disposition", @style = "width:125px" })
                </div>
            </th>
            <th>
                <div id="status-header" class="@(ViewBag.CurrentStatusID != null ? "table-header-filter-clear" : "table-header-filter-add")" style="width:125px" onclick="toggleFilter('status-header', 'status-filter', 'StatusID')">
                    Status
                </div>
                <div id="status-filter" hidden="hidden">
                    @Html.ListBox("StatusID", ViewBag.Status as SelectList, new { @class = "chosenFilter", data_placeholder = "Status", @style = "width:125px" })
                </div>
            </th>
            <th>
                <div id="pkgstatus-header" class="@(ViewBag.CurrentPkgStatusID != null ? "table-header-filter-clear" : "table-header-filter-add")" style="width:125px" onclick="toggleFilter('pkgstatus-header', 'pkgstatus-filter', 'PkgStatusID')">
                    Pkg Status
                </div>
                <div id="pkgstatus-filter" hidden="hidden">
                    @Html.ListBox("PkgStatusID", ViewBag.PkgStatus as SelectList, new { @class = "chosenFilter", data_placeholder = "PkgStatus", @style = "width:125px" })
                </div>
            </th>
            <th>

            </th>
        </tr>
        @foreach (var item in Model)
        {

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.AppCIID)
                </td>
                <td>
                    @Html.ActionLink(item.App.Name, "Details", new { id = item.AppCIID })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.App.Manufacturer)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.App.Version)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CMID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CMModel)
                </td>
                <td>
                    @Html.DisplayFor(model => item.App.AppScope.Scope)

                </td>
                <td>
                    @Html.EditorFor(modelItem => item.AppDisposition.Disposition, new { htmlAttributes = new { @class = "row-control AppDisposition", @style = "width:125px" } })
                </td>
                <td>
                    @Html.EditorFor(modelItem => item.AppStatu.Status, new { htmlAttributes = new { @class = "row-control AppStatus", @style = "width:125px" } })
                    @Html.HiddenFor(model => item.AppCIID, new { @class = "AppCIID" })
                    @Html.HiddenFor(model => item.RowVersion, new { @class = "RowVersion" })
                </td>
                <td>
                    @Html.EditorFor(modelItem => item.AppPkgStatu.Status, new { htmlAttributes = new { @class = "row-control AppPkgStatus", @style = "width:125px" } })
                </td>
                <td>
                    <div id="show-message" hidden="hidden" class="col-md-1">
                        &nbsp;
                    </div>
                </td>
            </tr>
        }
    </table>
}
<br />
<div class="col-md-6">
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
</div>
<div class="col-md-6" style="text-align:right">Total Count: <b>@Model.TotalItemCount</b></div>

@Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, statusID = ViewBag.CurrentStatusID, dispositionID = ViewBag.CurrentDispositionID, scopeID = ViewBag.CurrentScopeID, appModel = ViewBag.CurrentCMModel, dept = ViewBag.CurrentDept, deptHL = ViewBag.CurrentDeptHL, deptFilter = ViewBag.CurrentDeptFilter, deploymentID = ViewBag.CurrentDeploymentID, userID = ViewBag.CurrentUserID }))

@*<div id="dialog" title="Comments">
        <textarea class="form-control" cols="30" id="comments" rows="5"></textarea>
    </div>*@